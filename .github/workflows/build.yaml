name: Build Application

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  check-tag:
    runs-on: ubuntu-latest
    name: Check for tag
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Load Version
        run: |
          echo RELEASE_VERSION=$(cat ./version.txt) >> $GITHUB_ENV
      - name: Check for Tag
        run: |
          if git show-ref --tags --verify --quiet "refs/tags/${RELEASE_VERSION}"; then
            echo TAG_EXISTS=true >> $GITHUB_ENV
          else
            echo TAG_EXISTS=false >> $GITHUB_ENV
          fi
      
  build:
    if: ${{ env.TAG_EXISTS == 'false' }}
    strategy:
      matrix:
        rid: 
          - win-x64
          - win-arm64
          - linux-x64
          - linux-arm64
          - osx-x64
          - osx-arm64
    runs-on: ubuntu-latest
    name: Build ${{ matrix.rid }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Load Version
        run: |
          echo RELEASE_VERSION=$(cat ./version.txt) >> $GITHUB_ENV
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: publish
        run: dotnet publish -c Release -r ${{ matrix.rid }} --artifacts-path "../publish"
        working-directory: ./src
      - name: Package Windows binaries
        run: |
          mkdir dist
          cd dist
          mkdir CovertActionTools
          cd CovertActionTools
          cp -R /home/runner/work/CovertActionTools/CovertActionTools/publish/publish/CovertActionTools.App/release_${{ matrix.rid }}/* .
          cd ..
          7z a CovertActionTools-${{ matrix.rid }}.zip CovertActionTools/*
          rm -R CovertActionTools
      - name: Upload Artifact ${{ matrix.rid }}
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.rid }}
          path: |
            /home/runner/work/CovertActionTools/CovertActionTools/dist
          if-no-files-found: error
  release:
    if: ${{ env.TAG_EXISTS == 'false' }}
    needs: build
    runs-on: ubuntu-latest
    name: Create Release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Load Version
        run: |
          echo RELEASE_VERSION=$(cat ./version.txt) >> $GITHUB_ENV
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: binaries/
          merge-multiple: true
      - name: Make a release
        uses: ncipollo/release-action@v1
        with:
          name: 'v${{ env.RELEASE_VERSION }}'
          body: 'Compiled binaries'
          commit: ${{ github.ref_name }}
          tag: ${{ env.RELEASE_VERSION }}
          removeArtifacts: true
          artifacts: "binaries/*"
          token: ${{ secrets.GITHUB_TOKEN }}